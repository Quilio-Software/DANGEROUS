/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

#ifndef IMAGE_DIRECTORY
#define IMAGE_DIRECTORY File::getSpecialLocation (File::currentExecutableFile)
#endif

using namespace juce;

//==============================================================================
SafeequaliserAudioProcessorEditor::SafeequaliserAudioProcessorEditor (SafeequaliserAudioProcessor& p, AudioProcessorValueTreeState& apvts)
    : AudioProcessorEditor (p), audioProcessor (p), vts (apvts)
{
    setSize (810, 600);
    int filterGraphVerticalOffset = 201;
    int col1X = 30;
    int col2X = 140;
    int col3X = 250;
    int col4X = 360;
    int col5X = 470;
    
    int row1Y = 80 + filterGraphVerticalOffset;
    int row2Y = 182 + filterGraphVerticalOffset;
    int row3Y = 285 + filterGraphVerticalOffset;

    std::vector<int> cols = { col1X, col2X, col3X, col4X, col5X };
    std::vector<int> rows = { row1Y, row2Y, row3Y };
    eqComponent = std::make_unique<EQComponent>(5, vts, cols, rows);
    eqComponent->setBounds (getBounds());
    addAndMakeVisible (*eqComponent);


    //// frequncy display
    //addAndMakeVisible (&display);
    //display.setBounds (20, 20, 770, 180);
    //display.setMaxDecibels (20);
    //display.addListener (this);
    //
    //display.setControlColour (0, Colours::red);
    //display.setControlColour (1, Colours::green);
    //display.setControlColour (2, Colours::yellow);
    //display.setControlColour (3, Colours::blue);
    //display.setControlColour (4, Colours::skyblue);
    //
    //display.setControlLimits (0, 22, 1000, -12, 12);
    //display.setControlLimits (1, 82, 3900, -12, 12);
    //display.setControlLimits (2, 180, 4700, -12, 12);
    //display.setControlLimits (3, 220, 10000, -12, 12);
    //display.setControlLimits (4, 580, 20000, -12, 12);
    //
    //display.setControlQLimits (0, 0.1, 10, 0.5);
    //display.setControlQLimits (1, 0.1, 10, 0.5);
    //display.setControlQLimits (2, 0.1, 10, 0.5);
    //display.setControlQLimits (3, 0.1, 10, 0.5);
    //display.setControlQLimits (4, 0.1, 10, 0.5);
    //
    //display.setControlParameters (0, 150, 0, 0.71);
    //display.setControlParameters (1, 560, 0, 0.71);
    //display.setControlParameters (2, 1000, 0, 0.71);
    //display.setControlParameters (3, 3300, 0, 0.71);
    //display.setControlParameters (4, 8200, 0, 0.71);
}

SafeequaliserAudioProcessorEditor::~SafeequaliserAudioProcessorEditor()
{
}

//==============================================================================
void SafeequaliserAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll(juce::Colours::lightgreen);
}

void SafeequaliserAudioProcessorEditor::resized()
{
    if (eqComponent)
        eqComponent->setBounds (getLocalBounds());
}

void SafeequaliserAudioProcessorEditor::sliderUpdate (Slider* slider)
{
//    if (slider == sliders [SafeequaliserAudioProcessor::PARAMgain0]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMfreq0]->getSliderPointer())
//    {
//        double fc = sliders [SafeequaliserAudioProcessor::PARAMfreq0]->getValue();
//        double gain = sliders [SafeequaliserAudioProcessor::PARAMgain0]->getValue();
////        display.setFilter (0, 44100, IIRCoefficients::makeLowShelf (44100, fc, 0.71, Decibels::decibelsToGain (gain)));
//        display.setControlParameters (0, fc, gain, 1);
//    }
//    
//    if (slider == sliders [SafeequaliserAudioProcessor::PARAMgain1]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMfreq1]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMqFactor1]->getSliderPointer())
//    {
//        double fc = sliders [SafeequaliserAudioProcessor::PARAMfreq1]->getValue();
//        double gain = sliders [SafeequaliserAudioProcessor::PARAMgain1]->getValue();
//        double q = sliders [SafeequaliserAudioProcessor::PARAMqFactor1]->getValue();
////        display.setFilter (1, 44100, IIRCoefficients::makePeakFilter (44100, fc, q, Decibels::decibelsToGain (gain)));
//        display.setControlParameters (1, fc, gain, q);
//    }
//    
//    if (slider == sliders [SafeequaliserAudioProcessor::PARAMgain2]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMfreq2]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMqFactor2]->getSliderPointer())
//    {
//        double fc = sliders [SafeequaliserAudioProcessor::PARAMfreq2]->getValue();
//        double gain = sliders [SafeequaliserAudioProcessor::PARAMgain2]->getValue();
//        double q = sliders [SafeequaliserAudioProcessor::PARAMqFactor2]->getValue();
////        display.setFilter (2, 44100, IIRCoefficients::makePeakFilter (44100, fc, q, Decibels::decibelsToGain (gain)));
//        display.setControlParameters (2, fc, gain, q);
//    }
//    
//    if (slider == sliders [SafeequaliserAudioProcessor::PARAMgain3]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMfreq3]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMqFactor3]->getSliderPointer())
//    {
//        double fc = sliders [SafeequaliserAudioProcessor::PARAMfreq3]->getValue();
//        double gain = sliders [SafeequaliserAudioProcessor::PARAMgain3]->getValue();
//        double q = sliders [SafeequaliserAudioProcessor::PARAMqFactor3]->getValue();
// //       display.setFilter (3, 44100, IIRCoefficients::makePeakFilter (44100, fc, q, Decibels::decibelsToGain (gain)));
//        display.setControlParameters (3, fc, gain, q);
//    }
//    
//    if (slider == sliders [SafeequaliserAudioProcessor::PARAMgain4]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMfreq4]->getSliderPointer())
//    {
//        double fc = sliders [SafeequaliserAudioProcessor::PARAMfreq4]->getValue();
//        double gain = sliders [SafeequaliserAudioProcessor::PARAMgain4]->getValue();
////       display.setFilter (4, 44100, IIRCoefficients::makeHighShelf (44100, fc, 0.71, Decibels::decibelsToGain (gain)));
//        display.setControlParameters (4, fc, gain, 1);
//    }
}

void SafeequaliserAudioProcessorEditor::filterControlChanged (int controlNum)
{
}

void SafeequaliserAudioProcessorEditor::updateUI()
{
 /*   float freq, gain, qFactor;
    
    gain = processor.getParameter (0);
    freq = processor.getParameter (1);
    display.setFilter (0, 44100, IIRCoefficients::makeLowShelf (44100, freq, 0.71, Decibels::decibelsToGain (gain)));
    display.setControlParameters (0, freq, gain, 1);
    
    gain = processor.getParameter (2);
    freq = processor.getParameter (3);
    qFactor = processor.getParameter (4);
    display.setFilter (1, 44100, IIRCoefficients::makePeakFilter (44100, freq, qFactor, Decibels::decibelsToGain (gain)));
    display.setControlParameters (1, freq, gain, qFactor);
    
    gain = processor.getParameter (5);
    freq = processor.getParameter (6);
    qFactor = processor.getParameter (7);
    display.setFilter (2, 44100, IIRCoefficients::makePeakFilter (44100, freq, qFactor, Decibels::decibelsToGain (gain)));
    display.setControlParameters (2, freq, gain, qFactor);
    
    gain = processor.getParameter (8);
    freq = processor.getParameter (9);
    qFactor = processor.getParameter (10);
    display.setFilter (3, 44100, IIRCoefficients::makePeakFilter (44100, freq, qFactor, Decibels::decibelsToGain (gain)));
    display.setControlParameters (3, freq, gain, qFactor);
    
    gain = processor.getParameter (11);
    freq = processor.getParameter (12);
    display.setFilter (4, 44100, IIRCoefficients::makeHighShelf (44100, freq, 0.71, Decibels::decibelsToGain (gain)));
    display.setControlParameters (4, freq, gain, 1);*/
}
