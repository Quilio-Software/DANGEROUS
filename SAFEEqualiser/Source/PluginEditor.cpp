/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

#ifndef IMAGE_DIRECTORY
#define IMAGE_DIRECTORY File::getSpecialLocation (File::currentExecutableFile)
#endif

using namespace juce;

//==============================================================================
SafeequaliserAudioProcessorEditor::SafeequaliserAudioProcessorEditor (SafeequaliserAudioProcessor& p, AudioProcessorValueTreeState& apvts)
    : AudioProcessorEditor (p), audioProcessor (p), vts (apvts)
{
    setSize (810, 600);
    
 //   File imageDirectory (IMAGE_DIRECTORY);

//    File backgroundFile = imageDirectory.getChildFile ("Images/EQ_background2.png");
//    backgroundImage = ImageCache::getFromFile (backgroundFile);



    
    int filterGraphVerticalOffset = 201;
    int col1X = 30;
    int col2X = 140;
    int col3X = 250;
    int col4X = 360;
    int col5X = 470;
    
    int row1Y = 80 + filterGraphVerticalOffset;
    int row2Y = 182 + filterGraphVerticalOffset;
    int row3Y = 285 + filterGraphVerticalOffset;

    
    //addAndMakeVisible (&recordButton);
    //recordButton.setBounds (580, 358 + filterGraphVerticalOffset, 100, 22);
    //
    //addAndMakeVisible (&loadButton);
    //loadButton.setBounds (690, 358 + filterGraphVerticalOffset, 100, 22);
    //
    //addAndMakeVisible (&descriptorBox);
    //descriptorBox.setBounds (580, 254 + filterGraphVerticalOffset, 210, 94);
    //
    //addAndMakeVisible (&metaDataButton);
    //metaDataButton.setBounds (721, 214 + filterGraphVerticalOffset, 30, 30);
    //
    //addAndMakeVisible (&infoButton);
    //infoButton.setBounds (680, 214 + filterGraphVerticalOffset,	 30, 30);
    //
    //addAndMakeVisible (&fileAccessButton);
    //fileAccessButton.setBounds (760, 214 + filterGraphVerticalOffset, 30, 30);
    //
    //setExtraScreenPosition (210, 251);
    
    // first band
    addAndMakeVisible (gain0Slider);
    gain0Slider.setBounds (col1X, row1Y, 80, 100);
    gain0Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    gain0Slider.setHelpText ("G");
    
    addAndMakeVisible (freq0Slider);
    freq0Slider.setBounds (col1X, row2Y, 80, 100);
    freq0Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    freq0Slider.setHelpText ("F");
    
    // second band
    addAndMakeVisible (gain1Slider);
    gain1Slider.setBounds (col2X, row1Y, 80, 100);
    gain1Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    gain1Slider.setHelpText ("G");
    
    addAndMakeVisible (freq1Slider);
    freq1Slider.setBounds (col2X, row2Y, 80, 100);
    freq1Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    freq1Slider.setHelpText ("F");
    
    addAndMakeVisible (qFactor1Slider);
    qFactor1Slider.setBounds (col2X, row3Y, 80, 100);
    qFactor1Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    qFactor1Slider.setHelpText ("Q");
    
    // third band
    addAndMakeVisible (gain2Slider);
    gain2Slider.setBounds (col3X, row1Y, 80, 100);
    gain2Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    gain2Slider.setHelpText ("G");
    
    addAndMakeVisible (freq2Slider);
    freq2Slider.setBounds (col3X, row2Y, 80, 100);
    freq2Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    freq2Slider.setHelpText ("F");
    
    addAndMakeVisible (qFactor2Slider);
    qFactor2Slider.setBounds (col3X, row3Y, 80, 100);
    qFactor2Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    qFactor2Slider.setHelpText ("Q");

    // fourth band
    addAndMakeVisible (gain3Slider);
    gain3Slider.setBounds (col4X, row1Y, 80, 100);
    gain3Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    gain3Slider.setHelpText ("G");
    
    addAndMakeVisible (freq3Slider);
    freq3Slider.setBounds (col4X, row2Y, 80, 100);
    freq3Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    freq3Slider.setHelpText ("F");
    
    addAndMakeVisible (qFactor3Slider);
    qFactor3Slider.setBounds (col4X, row3Y, 80, 100);
    qFactor3Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    qFactor3Slider.setHelpText ("Q");
    
    // fifth band
    addAndMakeVisible (gain4Slider);
    gain4Slider.setBounds (col5X, row1Y, 80, 100);
    gain4Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    gain4Slider.setHelpText ("G");
    
    addAndMakeVisible (freq4Slider);
    freq4Slider.setBounds (col5X, row2Y, 80, 100);
    freq4Slider.setColour (juce::Slider::rotarySliderFillColourId, juce::Colours::green);
    freq4Slider.setHelpText ("F");

    // Then in your class constructor or initialization method, add:
    gain0Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 1 Gain", gain0Slider);
    freq0Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 1 Frequency", freq0Slider);

    gain1Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 2 Gain", gain1Slider);
    freq1Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 2 Frequency", freq1Slider);
    qFactor1Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 2 Q Factor", qFactor1Slider);

    gain2Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 3 Gain", gain2Slider);
    freq2Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 3 Frequency", freq2Slider);
    qFactor2Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 3 Q Factor", qFactor2Slider);

    gain3Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 4 Gain", gain3Slider);
    freq3Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 4 Frequency", freq3Slider);
    qFactor3Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 4 Q Factor", qFactor3Slider);

    gain4Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 5 Gain", gain4Slider);
    freq4Attachment = std::make_unique<AudioProcessorValueTreeState::SliderAttachment>(vts, "Band 5 Frequency", freq4Slider);

    //// frequncy display
    //addAndMakeVisible (&display);
    //display.setBounds (20, 20, 770, 180);
    //display.setMaxDecibels (20);
    //display.addListener (this);
    //
    //display.setControlColour (0, Colours::red);
    //display.setControlColour (1, Colours::green);
    //display.setControlColour (2, Colours::yellow);
    //display.setControlColour (3, Colours::blue);
    //display.setControlColour (4, Colours::skyblue);
    //
    //display.setControlLimits (0, 22, 1000, -12, 12);
    //display.setControlLimits (1, 82, 3900, -12, 12);
    //display.setControlLimits (2, 180, 4700, -12, 12);
    //display.setControlLimits (3, 220, 10000, -12, 12);
    //display.setControlLimits (4, 580, 20000, -12, 12);
    //
    //display.setControlQLimits (0, 0.1, 10, 0.5);
    //display.setControlQLimits (1, 0.1, 10, 0.5);
    //display.setControlQLimits (2, 0.1, 10, 0.5);
    //display.setControlQLimits (3, 0.1, 10, 0.5);
    //display.setControlQLimits (4, 0.1, 10, 0.5);
    //
    //display.setControlParameters (0, 150, 0, 0.71);
    //display.setControlParameters (1, 560, 0, 0.71);
    //display.setControlParameters (2, 1000, 0, 0.71);
    //display.setControlParameters (3, 3300, 0, 0.71);
    //display.setControlParameters (4, 8200, 0, 0.71);
}

SafeequaliserAudioProcessorEditor::~SafeequaliserAudioProcessorEditor()
{
}

//==============================================================================
void SafeequaliserAudioProcessorEditor::paint (Graphics& g)
{
    int width = getWidth();
    int height = getHeight();
    int imageWidth = backgroundImage.getWidth();
    int imageHeight = backgroundImage.getHeight();
    
    g.drawImage (backgroundImage, 0, 0, width, height, 0, 0, imageWidth, imageHeight);
}

void SafeequaliserAudioProcessorEditor::resized()
{

}

void SafeequaliserAudioProcessorEditor::sliderUpdate (Slider* slider)
{
//    if (slider == sliders [SafeequaliserAudioProcessor::PARAMgain0]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMfreq0]->getSliderPointer())
//    {
//        double fc = sliders [SafeequaliserAudioProcessor::PARAMfreq0]->getValue();
//        double gain = sliders [SafeequaliserAudioProcessor::PARAMgain0]->getValue();
////        display.setFilter (0, 44100, IIRCoefficients::makeLowShelf (44100, fc, 0.71, Decibels::decibelsToGain (gain)));
//        display.setControlParameters (0, fc, gain, 1);
//    }
//    
//    if (slider == sliders [SafeequaliserAudioProcessor::PARAMgain1]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMfreq1]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMqFactor1]->getSliderPointer())
//    {
//        double fc = sliders [SafeequaliserAudioProcessor::PARAMfreq1]->getValue();
//        double gain = sliders [SafeequaliserAudioProcessor::PARAMgain1]->getValue();
//        double q = sliders [SafeequaliserAudioProcessor::PARAMqFactor1]->getValue();
////        display.setFilter (1, 44100, IIRCoefficients::makePeakFilter (44100, fc, q, Decibels::decibelsToGain (gain)));
//        display.setControlParameters (1, fc, gain, q);
//    }
//    
//    if (slider == sliders [SafeequaliserAudioProcessor::PARAMgain2]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMfreq2]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMqFactor2]->getSliderPointer())
//    {
//        double fc = sliders [SafeequaliserAudioProcessor::PARAMfreq2]->getValue();
//        double gain = sliders [SafeequaliserAudioProcessor::PARAMgain2]->getValue();
//        double q = sliders [SafeequaliserAudioProcessor::PARAMqFactor2]->getValue();
////        display.setFilter (2, 44100, IIRCoefficients::makePeakFilter (44100, fc, q, Decibels::decibelsToGain (gain)));
//        display.setControlParameters (2, fc, gain, q);
//    }
//    
//    if (slider == sliders [SafeequaliserAudioProcessor::PARAMgain3]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMfreq3]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMqFactor3]->getSliderPointer())
//    {
//        double fc = sliders [SafeequaliserAudioProcessor::PARAMfreq3]->getValue();
//        double gain = sliders [SafeequaliserAudioProcessor::PARAMgain3]->getValue();
//        double q = sliders [SafeequaliserAudioProcessor::PARAMqFactor3]->getValue();
// //       display.setFilter (3, 44100, IIRCoefficients::makePeakFilter (44100, fc, q, Decibels::decibelsToGain (gain)));
//        display.setControlParameters (3, fc, gain, q);
//    }
//    
//    if (slider == sliders [SafeequaliserAudioProcessor::PARAMgain4]->getSliderPointer() || slider == sliders [SafeequaliserAudioProcessor::PARAMfreq4]->getSliderPointer())
//    {
//        double fc = sliders [SafeequaliserAudioProcessor::PARAMfreq4]->getValue();
//        double gain = sliders [SafeequaliserAudioProcessor::PARAMgain4]->getValue();
////       display.setFilter (4, 44100, IIRCoefficients::makeHighShelf (44100, fc, 0.71, Decibels::decibelsToGain (gain)));
//        display.setControlParameters (4, fc, gain, 1);
//    }
}

void SafeequaliserAudioProcessorEditor::filterControlChanged (int controlNum)
{
}

void SafeequaliserAudioProcessorEditor::updateUI()
{
 /*   float freq, gain, qFactor;
    
    gain = processor.getParameter (0);
    freq = processor.getParameter (1);
    display.setFilter (0, 44100, IIRCoefficients::makeLowShelf (44100, freq, 0.71, Decibels::decibelsToGain (gain)));
    display.setControlParameters (0, freq, gain, 1);
    
    gain = processor.getParameter (2);
    freq = processor.getParameter (3);
    qFactor = processor.getParameter (4);
    display.setFilter (1, 44100, IIRCoefficients::makePeakFilter (44100, freq, qFactor, Decibels::decibelsToGain (gain)));
    display.setControlParameters (1, freq, gain, qFactor);
    
    gain = processor.getParameter (5);
    freq = processor.getParameter (6);
    qFactor = processor.getParameter (7);
    display.setFilter (2, 44100, IIRCoefficients::makePeakFilter (44100, freq, qFactor, Decibels::decibelsToGain (gain)));
    display.setControlParameters (2, freq, gain, qFactor);
    
    gain = processor.getParameter (8);
    freq = processor.getParameter (9);
    qFactor = processor.getParameter (10);
    display.setFilter (3, 44100, IIRCoefficients::makePeakFilter (44100, freq, qFactor, Decibels::decibelsToGain (gain)));
    display.setControlParameters (3, freq, gain, qFactor);
    
    gain = processor.getParameter (11);
    freq = processor.getParameter (12);
    display.setFilter (4, 44100, IIRCoefficients::makeHighShelf (44100, freq, 0.71, Decibels::decibelsToGain (gain)));
    display.setControlParameters (4, freq, gain, 1);*/
}
