/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

#ifndef IMAGE_DIRECTORY
#define IMAGE_DIRECTORY File::getSpecialLocation (File::currentExecutableFile)
#endif

//==============================================================================
SafedistortionAudioProcessorEditor::SafedistortionAudioProcessorEditor (SafedistortionAudioProcessor* ownerFilter)
    : SAFEAudioProcessorEditor (ownerFilter)
{
    setSize (844, 404);
    
    File imageDirectory (IMAGE_DIRECTORY);

    //File backgroundFile = imageDirectory.getChildFile ("Images/Distortion_background.png");
    //backgroundImage = ImageCache::getFromFile (backgroundFile);
    backgroundImage = ImageCache::getFromMemory(SAFEImages::distortion_background_png, SAFEImages::distortion_background_pngSize);

    
    addAndMakeVisible (&recordButton);
    recordButton.setBounds (612, 361, 100, 22);
    
    addAndMakeVisible (&loadButton);
    loadButton.setBounds (722, 361, 100, 22);
    
    addAndMakeVisible (&descriptorBox);
    descriptorBox.setBounds (612, 256, 210, 94); 
    
    addAndMakeVisible (&metaDataButton);
    metaDataButton.setBounds (752, 216, 30, 30);
    
    addAndMakeVisible (&fileAccessButton);
    fileAccessButton.setBounds (792, 216, 30, 30);
    
    setMetaDataScreenPosition (227, 54);
    
    // input gain slider
    SAFESlider* inputGainSlider = sliders [SafedistortionAudioProcessor::PARAMinputGain];
    addAndMakeVisible (inputGainSlider);
    inputGainSlider->setBounds (142, 132, 80, 100);
    inputGainSlider->setColour (SAFEColours::green);
    inputGainSlider->setText ("Drive");
    
    // output gain slider
    SAFESlider* outputGainSlider = sliders [SafedistortionAudioProcessor::PARAMoutputGain];
    addAndMakeVisible (outputGainSlider);
    outputGainSlider->setBounds (142, 234, 80, 100);
    outputGainSlider->setColour (SAFEColours::green);
    outputGainSlider->setText ("Gain");
    
    // knee slider
    SAFESlider* kneeSlider = sliders [SafedistortionAudioProcessor::PARAMknee];
    addAndMakeVisible (kneeSlider);
    kneeSlider->setBounds (32, 82, 80, 100);
    kneeSlider->setColour (SAFEColours::red);
    kneeSlider->setText ("Knee");
    kneeSlider->setNumDecimalPlaces (2);
    
    // bias slider
    SAFESlider* biasSlider = sliders [SafedistortionAudioProcessor::PARAMbias];
    addAndMakeVisible (biasSlider);
    biasSlider->setBounds (32, 184, 80, 100);
    biasSlider->setColour (SAFEColours::red);
    biasSlider->setText ("Bias");
    biasSlider->setNumDecimalPlaces (2);
    
    // output gain slider
    SAFESlider* toneSlider = sliders [SafedistortionAudioProcessor::PARAMtone];
    addAndMakeVisible (toneSlider);
    toneSlider->setBounds (32, 287, 80, 100);
    toneSlider->setColour (SAFEColours::red);
    toneSlider->setText ("Tone");
    toneSlider->setNumDecimalPlaces (2);
    
    // graph
    addAndMakeVisible (&display);
    display.setBounds (240, 20, 360, 360);
    display.setXAxisRange (-1, 1);
    display.setYAxisRange (-1, 1);
    display.setLineSeparation (0.3);
    
    displayInputs = display.getInputValues();
}

SafedistortionAudioProcessorEditor::~SafedistortionAudioProcessorEditor()
{
}

//==============================================================================
void SafedistortionAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::grey);
    
    int width = getWidth();
    int height = getHeight();
    int imageWidth = backgroundImage.getWidth();
    int imageHeight = backgroundImage.getHeight();
    
    g.drawImage (backgroundImage, 0, 0, width, height, 0, 0, imageWidth, imageHeight);
}

void SafedistortionAudioProcessorEditor::sliderUpdate (Slider* slider)
{
    updateUI();
}
    
void SafedistortionAudioProcessorEditor::updateDisplay()
{
    updateUI();
}
    
void SafedistortionAudioProcessorEditor::updateUI()
{
    SafedistortionAudioProcessor* ourProcessor = getProcessor();
    
    float inputGain = ourProcessor->getGainParameter (0);
    float knee = ourProcessor->getScaledParameter (1);
    float bias = ourProcessor->getScaledParameter (2);
    float outputGain = ourProcessor->getGainParameter (4);
    
    // Auxiliary variables
    float oneMinusBias = 1.0f - bias;
    float oneMinusKnee = 1.0f - knee;
    float onePlusKnee  = 1.0f + knee;
    
    // Knee parameters (calculate for speed)
    float c2 = - outputGain / (4.0f * knee);
    float c1 = outputGain * onePlusKnee / (2.0f * knee);
    float c0 = - outputGain * oneMinusKnee * oneMinusKnee / (4.0f * knee);
    
    Array <float> outputValues;
    
    // Apply distortion
    for (int sample = 0; sample < displayInputs.size(); ++sample)
    {
        float input = displayInputs [sample];
	    
        input *= inputGain; // apply gain
            
        // Soft clipping
        if(input > oneMinusKnee)
            if(input >= onePlusKnee) // positive clipping
                input = outputGain;
            else // soft knee (positive)
            {
                input = c2 * input * input + c1 * input + c0;
            }
        else
        {
            if(input  < - oneMinusBias * oneMinusKnee)
            {
                if(input <= - oneMinusBias * onePlusKnee) // negative clipping
                    input = -oneMinusBias*outputGain;
                else // soft knee (negative)
                {
                    input = -c2 * input * input/oneMinusBias + c1 * input - c0 * oneMinusBias;
                }
            }
            else // linear region
            {
                input *= outputGain;
            }
        }
        
        outputValues.add (input);
    }
    
    display.setOutputValues (outputValues);
}
