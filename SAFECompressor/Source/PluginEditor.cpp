/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

#ifndef IMAGE_DIRECTORY
#define IMAGE_DIRECTORY File ("C:/Users/id115387/Documents/ResearchWork/SAFE/Utils/SAFE_juce_module/LookAndFeel")
#endif

//==============================================================================
SafecompressorAudioProcessorEditor::SafecompressorAudioProcessorEditor (SafecompressorAudioProcessor* ownerFilter)
    : SAFEAudioProcessorEditor (ownerFilter)
{
    // This is where our plugin's editor size is set.
    setSize (844, 404);
    
    File imageDirectory (IMAGE_DIRECTORY);

    //File backgroundFile = imageDirectory.getChildFile ("Images/Compressor_background.png");
    //backgroundImage = ImageCache::getFromFile (backgroundFile);
    backgroundImage = ImageCache::getFromMemory(SAFEImages::compressor_background_png, SAFEImages::compressor_background_pngSize);
    
    
    addAndMakeVisible (&recordButton);
    recordButton.setBounds (612, 361, 100, 22);
    
    addAndMakeVisible (&loadButton);
    loadButton.setBounds (722, 361, 100, 22);
    
    addAndMakeVisible (&descriptorBox);
    descriptorBox.setBounds (612, 256, 210, 94); 
    
    addAndMakeVisible (&metaDataButton);
    metaDataButton.setBounds (752, 216, 30, 30);
    
    addAndMakeVisible (&infoButton);
    infoButton.setBounds (712, 216,	 30, 30);
    
    addAndMakeVisible (&fileAccessButton);
    fileAccessButton.setBounds (792, 216, 30, 30);
    
    setExtraScreenPosition (227, 54);
    
    // threshold slider
    SAFESlider* thresholdSlider = sliders [SafecompressorAudioProcessor::PARAMthreshold];
    addAndMakeVisible (thresholdSlider);
    thresholdSlider->setBounds (32, 82, 80, 100);
    thresholdSlider->setColour (SAFEColours::green);
    thresholdSlider->setText ("Thresh");
    
    // ratio slider
    SAFESlider* ratioSlider = sliders [SafecompressorAudioProcessor::PARAMratio];
    addAndMakeVisible (ratioSlider);
    ratioSlider->setBounds (32, 184, 80, 100);
    ratioSlider->setColour (SAFEColours::green);
    ratioSlider->setText ("Ratio");
    
    // knee slider
    SAFESlider* kneeSlider = sliders [SafecompressorAudioProcessor::PARAMknee];
    addAndMakeVisible (kneeSlider);
    kneeSlider->setBounds (32, 287, 80, 100);
    kneeSlider->setColour (SAFEColours::green);
    kneeSlider->setText ("Knee");
    
    // atack slider
    SAFESlider* attackSlider = sliders [SafecompressorAudioProcessor::PARAMatime];
    addAndMakeVisible (attackSlider);
    attackSlider->setUseSIPrefixes (false);
    attackSlider->setBounds (142, 82, 80, 100);
    attackSlider->setColour (SAFEColours::red);
    attackSlider->setText ("A");
    
    // release slider
    SAFESlider* releaseSlider = sliders [SafecompressorAudioProcessor::PARAMrtime];
    addAndMakeVisible (releaseSlider);
    releaseSlider->setUseSIPrefixes (false);
    releaseSlider->setBounds (142, 184, 80, 100);
    releaseSlider->setColour (SAFEColours::red);
    releaseSlider->setText ("R");
    
    // make up slider
    SAFESlider* makeUpSlider = sliders [SafecompressorAudioProcessor::PARAMmakeUpGain];
    addAndMakeVisible (makeUpSlider);
    makeUpSlider->setUseSIPrefixes (false);
    makeUpSlider->setBounds (142, 287, 80, 100);
    makeUpSlider->setColour (SAFEColours::yellow);
    makeUpSlider->setText ("Gain");
    
    // graph
    addAndMakeVisible (&display);
    display.setBounds (240, 20, 360, 360);
    display.setXAxisRange (-60, 0);
    display.setYAxisRange (-60, 0);
    display.setLineSeparation (10);
    
    addAndMakeVisible (&meter);
    meter.setBounds (864, 10, 30, 380);
    meterInputs = display.getInputValues();
}

SafecompressorAudioProcessorEditor::~SafecompressorAudioProcessorEditor()
{
}

//==============================================================================
void SafecompressorAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::grey);
    
    int width = getWidth();
    int height = getHeight();
    int imageWidth = backgroundImage.getWidth();
    int imageHeight = backgroundImage.getHeight();
    
    g.drawImage (backgroundImage, 0, 0, width, height, 0, 0, imageWidth, imageHeight);
}

void SafecompressorAudioProcessorEditor::sliderUpdate (Slider* slider)
{
    updateDisplay();
}

void SafecompressorAudioProcessorEditor::updateUI()
{
    updateDisplay();
}

void SafecompressorAudioProcessorEditor::updateMeters()
{    
    SafecompressorAudioProcessor* ourProcessor = getProcessor();
    
    float inputLevel, outputLevel;
    
    if (ourProcessor->isPlaying())
    {
        inputLevel = ourProcessor->getInputLevel();
        outputLevel = ourProcessor->getOutputLevel();
    }
    else
    {
        inputLevel = outputLevel = -100;
    }
    
    display.setMeterLevels (inputLevel, outputLevel);
    
    meter.setLevel (inputLevel);
}

void SafecompressorAudioProcessorEditor::updateDisplay()
{
    SafecompressorAudioProcessor* ourProcessor = getProcessor();
    
    float threshold = ourProcessor->getScaledParameter (0);
    float ratio = ourProcessor->getScaledParameter (1);
    float knee = ourProcessor->getScaledParameter (2);
    float gain = ourProcessor->getScaledParameter (5);
    
    float c0 = -((ratio - 1.0f) * (threshold * threshold - knee * threshold + knee * knee / 4.0f)) / (2.0f * knee * ratio);
    float c1 = ((ratio - 1) * threshold + (ratio + 1) * knee / 2.0f) / (knee * ratio);
    float c2 = (1 - ratio) / (2.0f * knee * ratio);
    
    Array <float> outputValues;
	
	for (int sample = 0 ; sample < meterInputs.size() ; ++sample) // sample by sample
	{        
	    float input = meterInputs [sample];
	    float output = 0;
		
		if (input >= threshold + knee / 2.0f)
            output = threshold + (input - threshold) / ratio;
		else if (input <= threshold - knee / 2.0f)
            output = input;
        else // KNEE (quadratic spline)
        {
            output = input * input * c2 + input * c1 + c0;
        }
        
		output = output + gain;
		
		outputValues.add (output);
	}
	
	display.setOutputValues (outputValues);
}
